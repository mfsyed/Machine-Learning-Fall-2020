def perceptron(data, labels, params={}, hook=None):
    # if T not in params, default to 100
    T = params.get('T', 100)

    # Your implementation here
    n = labels.shape[1]
    d = data.shape[0]
    theta = np.zeros((d,1))
    theta_0 = np.array([[0]])
    for i in range(T):
      changed = False
      for i in range(n):
        x = np.dot(theta.T, data[:,i:i+1])
        if np.sum((labels[:,i:i+1]*(x + theta_0))) <= 0:
          y = labels[:,i:i+1]*data[:,i:i+1]
          theta = theta + (labels[:,i:i+1]*data[:,i:i+1])
          theta_0 = theta_0 + labels[:,i:i+1]
          changed = True
      if not changed:
        break
    return (theta, theta_0)
    
    
def averaged_perceptron(data, labels, params={}, hook=None):
    # if T not in params, default to 100
    T = params.get('T', 100)

    # Your implementation here
    n = labels.shape[1]
    d = data.shape[0]
    theta = np.zeros((d,1))
    theta_0 = np.array([[0]])
    ths = np.zeros((d,1))
    th0s = np.array([[0]])
    for i in range(T):
      for i in range(n):
        x = np.dot(theta.T, data[:,i:i+1])
        if np.sum((labels[:,i:i+1]*(x + theta_0))) <= 0:
          y = labels[:,i:i+1]*data[:,i:i+1]
          theta = theta + (labels[:,i:i+1]*data[:,i:i+1])
          theta_0 = theta_0 + labels[:,i:i+1]
        ths = ths + theta
        th0s = th0s + theta_0
    return (ths/(n*T), th0s/(n*T))
    



