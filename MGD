import math

class Sequential:
    def __init__(self, modules, loss):            
        self.modules = modules
        self.loss = loss

    def mini_gd(self, X, Y, iters, lrate, notif_each=None, K=10):
        D, N = X.shape

        np.random.seed(0)
        num_updates = 0
        indices = np.arange(N)
        while num_updates < iters:

            np.random.shuffle(indices)
            X = X[:, indices]  # Your code
            Y = Y[:, indices]  # Your code
            
            for j in range(math.floor(N/K)):
                if num_updates >= iters: break

                # Implement the main part of mini_gd here
                Xt = np.array([X[:,j*K]]) # Your code
                Yt = np.array([Y[:,j*K]]) # Your code

                # The rest of this function should be similar to your
                # implementation of Sequential.sgd in HW 7
                # Your code
                
                Ypred = self.forward(Xt.T)
            
                loss = self.loss.forward(Ypred,Yt.T)
                
                dLdZ = self.loss.backward()
                grad = self.backward(dLdZ)
                self.sgd_step(lrate)
                
                num_updates += 1
        return X
    def forward(self, Xt):                        
        for m in self.modules: Xt = m.forward(Xt)
        return Xt

    def backward(self, delta):                   
        for m in self.modules[::-1]: delta = m.backward(delta)

    def sgd_step(self, lrate):    
        for m in self.modules: m.sgd_step(lrate)
